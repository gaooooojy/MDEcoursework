/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.chessgame.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.inf.chessgame.chessGame.ChessGamePackage;
import uk.ac.kcl.inf.chessgame.chessGame.ChessProgram;
import uk.ac.kcl.inf.chessgame.chessGame.height;
import uk.ac.kcl.inf.chessgame.chessGame.width;
import uk.ac.kcl.inf.chessgame.services.ChessGameGrammarAccess;

@SuppressWarnings("all")
public class ChessGameSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ChessGameGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ChessGamePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ChessGamePackage.CHESS_PROGRAM:
				sequence_ChessProgram(context, (ChessProgram) semanticObject); 
				return; 
			case ChessGamePackage.HEIGHT:
				sequence_height(context, (height) semanticObject); 
				return; 
			case ChessGamePackage.WIDTH:
				sequence_width(context, (width) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ChessProgram returns ChessProgram
	 *
	 * Constraint:
	 *     statements+=Statements+
	 */
	protected void sequence_ChessProgram(ISerializationContext context, ChessProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statements returns height
	 *     height returns height
	 *
	 * Constraint:
	 *     HEIGHT=INT
	 */
	protected void sequence_height(ISerializationContext context, height semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ChessGamePackage.Literals.HEIGHT__HEIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ChessGamePackage.Literals.HEIGHT__HEIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHeightAccess().getHEIGHTINTTerminalRuleCall_2_0(), semanticObject.getHEIGHT());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statements returns width
	 *     width returns width
	 *
	 * Constraint:
	 *     WIDTH=INT
	 */
	protected void sequence_width(ISerializationContext context, width semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ChessGamePackage.Literals.WIDTH__WIDTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ChessGamePackage.Literals.WIDTH__WIDTH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWidthAccess().getWIDTHINTTerminalRuleCall_2_0(), semanticObject.getWIDTH());
		feeder.finish();
	}
	
	
}
