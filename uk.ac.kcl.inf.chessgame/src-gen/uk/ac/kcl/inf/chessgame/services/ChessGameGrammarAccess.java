/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.chessgame.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ChessGameGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ChessProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.chessgame.ChessGame.ChessProgram");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementsParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//ChessProgram:
		//	statements+=Statements*;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statements*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statements
		public RuleCall getStatementsStatementsParserRuleCall_0() { return cStatementsStatementsParserRuleCall_0; }
	}
	public class StatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.chessgame.ChessGame.Statements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWidthParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHeightParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statements:
		//	width | height;
		@Override public ParserRule getRule() { return rule; }
		
		//width | height
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//width
		public RuleCall getWidthParserRuleCall_0() { return cWidthParserRuleCall_0; }
		
		//height
		public RuleCall getHeightParserRuleCall_1() { return cHeightParserRuleCall_1; }
	}
	public class WidthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.chessgame.ChessGame.width");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWidthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWIDTHAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWIDTHINTTerminalRuleCall_2_0 = (RuleCall)cWIDTHAssignment_2.eContents().get(0);
		
		//width:
		//	'width' '=' WIDTH=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'width' '=' WIDTH=INT
		public Group getGroup() { return cGroup; }
		
		//'width'
		public Keyword getWidthKeyword_0() { return cWidthKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//WIDTH=INT
		public Assignment getWIDTHAssignment_2() { return cWIDTHAssignment_2; }
		
		//INT
		public RuleCall getWIDTHINTTerminalRuleCall_2_0() { return cWIDTHINTTerminalRuleCall_2_0; }
	}
	public class HeightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.chessgame.ChessGame.height");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHeightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHEIGHTAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHEIGHTINTTerminalRuleCall_2_0 = (RuleCall)cHEIGHTAssignment_2.eContents().get(0);
		
		//height:
		//	'height' '=' HEIGHT=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'height' '=' HEIGHT=INT
		public Group getGroup() { return cGroup; }
		
		//'height'
		public Keyword getHeightKeyword_0() { return cHeightKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//HEIGHT=INT
		public Assignment getHEIGHTAssignment_2() { return cHEIGHTAssignment_2; }
		
		//INT
		public RuleCall getHEIGHTINTTerminalRuleCall_2_0() { return cHEIGHTINTTerminalRuleCall_2_0; }
	}
	
	
	private final ChessProgramElements pChessProgram;
	private final StatementsElements pStatements;
	private final WidthElements pWidth;
	private final HeightElements pHeight;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ChessGameGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pChessProgram = new ChessProgramElements();
		this.pStatements = new StatementsElements();
		this.pWidth = new WidthElements();
		this.pHeight = new HeightElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.chessgame.ChessGame".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ChessProgram:
	//	statements+=Statements*;
	public ChessProgramElements getChessProgramAccess() {
		return pChessProgram;
	}
	
	public ParserRule getChessProgramRule() {
		return getChessProgramAccess().getRule();
	}
	
	//Statements:
	//	width | height;
	public StatementsElements getStatementsAccess() {
		return pStatements;
	}
	
	public ParserRule getStatementsRule() {
		return getStatementsAccess().getRule();
	}
	
	//width:
	//	'width' '=' WIDTH=INT;
	public WidthElements getWidthAccess() {
		return pWidth;
	}
	
	public ParserRule getWidthRule() {
		return getWidthAccess().getRule();
	}
	
	//height:
	//	'height' '=' HEIGHT=INT;
	public HeightElements getHeightAccess() {
		return pHeight;
	}
	
	public ParserRule getHeightRule() {
		return getHeightAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
