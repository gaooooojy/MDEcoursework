/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.chessgame.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uk.ac.kcl.inf.chessgame.chessGame.ChessProgram
import uk.ac.kcl.inf.chessgame.chessGame.CellState
import uk.ac.kcl.inf.chessgame.chessGame.CellDisplay
import uk.ac.kcl.inf.chessgame.chessGame.Transition

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ChessGameGenerator extends AbstractGenerator {

		override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		val model = resource.contents.head as ChessProgram
		
		fsa.generateFile(deriveTargetFileNameFor(model, resource), model.generate)
	}
	
		def deriveTargetFileNameFor(ChessProgram program, Resource resource) {
			resource.URI.appendFileExtension('txt').lastSegment
		}
		
		def generate(ChessProgram program)'''
		    Program contains:
		    
		    - «program.eAllContents.filter(CellState).size» cell states
		    - «program.eAllContents.filter(CellDisplay).size» cell displays
		    - «program.eAllContents.filter(Transition).size» transitions
		    
		'''
	
}
