/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.arithmetic.arithmetic.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.inf.arithmetic.arithmetic.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ArithmeticFactoryImpl extends EFactoryImpl implements ArithmeticFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ArithmeticFactory init()
  {
    try
    {
      ArithmeticFactory theArithmeticFactory = (ArithmeticFactory)EPackage.Registry.INSTANCE.getEFactory(ArithmeticPackage.eNS_URI);
      if (theArithmeticFactory != null)
      {
        return theArithmeticFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ArithmeticFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArithmeticFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ArithmeticPackage.ARITHMETICS_PROGRAM: return createArithmeticsProgram();
      case ArithmeticPackage.STATEMENT: return createStatement();
      case ArithmeticPackage.EXPRESSION: return createExpression();
      case ArithmeticPackage.ADDITION_STATEMENT: return createAdditionStatement();
      case ArithmeticPackage.SUBTRACTION_STATEMENT: return createSubtractionStatement();
      case ArithmeticPackage.MULTIPLICATION_STATEMENT: return createMultiplicationStatement();
      case ArithmeticPackage.DIVISION_STATEMENT: return createDivisionStatement();
      case ArithmeticPackage.POWER_STATEMENT: return createPowerStatement();
      case ArithmeticPackage.NUMBER_EXPRESSION: return createNumberExpression();
      case ArithmeticPackage.INT_LITERAL: return createIntLiteral();
      case ArithmeticPackage.REAL_LITERAL: return createRealLiteral();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticsProgram createArithmeticsProgram()
  {
    ArithmeticsProgramImpl arithmeticsProgram = new ArithmeticsProgramImpl();
    return arithmeticsProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AdditionStatement createAdditionStatement()
  {
    AdditionStatementImpl additionStatement = new AdditionStatementImpl();
    return additionStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubtractionStatement createSubtractionStatement()
  {
    SubtractionStatementImpl subtractionStatement = new SubtractionStatementImpl();
    return subtractionStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiplicationStatement createMultiplicationStatement()
  {
    MultiplicationStatementImpl multiplicationStatement = new MultiplicationStatementImpl();
    return multiplicationStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DivisionStatement createDivisionStatement()
  {
    DivisionStatementImpl divisionStatement = new DivisionStatementImpl();
    return divisionStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PowerStatement createPowerStatement()
  {
    PowerStatementImpl powerStatement = new PowerStatementImpl();
    return powerStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberExpression createNumberExpression()
  {
    NumberExpressionImpl numberExpression = new NumberExpressionImpl();
    return numberExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntLiteral createIntLiteral()
  {
    IntLiteralImpl intLiteral = new IntLiteralImpl();
    return intLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealLiteral createRealLiteral()
  {
    RealLiteralImpl realLiteral = new RealLiteralImpl();
    return realLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticPackage getArithmeticPackage()
  {
    return (ArithmeticPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ArithmeticPackage getPackage()
  {
    return ArithmeticPackage.eINSTANCE;
  }

} //ArithmeticFactoryImpl
