/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.arithmetic.arithmetic.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import uk.ac.kcl.inf.arithmetic.arithmetic.ArithmeticPackage;
import uk.ac.kcl.inf.arithmetic.arithmetic.Expression;
import uk.ac.kcl.inf.arithmetic.arithmetic.MultiplicationStatement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Multiplication Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.arithmetic.arithmetic.impl.MultiplicationStatementImpl#getMultiplier1 <em>Multiplier1</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.arithmetic.arithmetic.impl.MultiplicationStatementImpl#getMultiplier2 <em>Multiplier2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MultiplicationStatementImpl extends StatementImpl implements MultiplicationStatement
{
  /**
   * The cached value of the '{@link #getMultiplier1() <em>Multiplier1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultiplier1()
   * @generated
   * @ordered
   */
  protected Expression multiplier1;

  /**
   * The cached value of the '{@link #getMultiplier2() <em>Multiplier2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultiplier2()
   * @generated
   * @ordered
   */
  protected Expression multiplier2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MultiplicationStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ArithmeticPackage.Literals.MULTIPLICATION_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getMultiplier1()
  {
    return multiplier1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMultiplier1(Expression newMultiplier1, NotificationChain msgs)
  {
    Expression oldMultiplier1 = multiplier1;
    multiplier1 = newMultiplier1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ArithmeticPackage.MULTIPLICATION_STATEMENT__MULTIPLIER1, oldMultiplier1, newMultiplier1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMultiplier1(Expression newMultiplier1)
  {
    if (newMultiplier1 != multiplier1)
    {
      NotificationChain msgs = null;
      if (multiplier1 != null)
        msgs = ((InternalEObject)multiplier1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ArithmeticPackage.MULTIPLICATION_STATEMENT__MULTIPLIER1, null, msgs);
      if (newMultiplier1 != null)
        msgs = ((InternalEObject)newMultiplier1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ArithmeticPackage.MULTIPLICATION_STATEMENT__MULTIPLIER1, null, msgs);
      msgs = basicSetMultiplier1(newMultiplier1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArithmeticPackage.MULTIPLICATION_STATEMENT__MULTIPLIER1, newMultiplier1, newMultiplier1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getMultiplier2()
  {
    return multiplier2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMultiplier2(Expression newMultiplier2, NotificationChain msgs)
  {
    Expression oldMultiplier2 = multiplier2;
    multiplier2 = newMultiplier2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ArithmeticPackage.MULTIPLICATION_STATEMENT__MULTIPLIER2, oldMultiplier2, newMultiplier2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMultiplier2(Expression newMultiplier2)
  {
    if (newMultiplier2 != multiplier2)
    {
      NotificationChain msgs = null;
      if (multiplier2 != null)
        msgs = ((InternalEObject)multiplier2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ArithmeticPackage.MULTIPLICATION_STATEMENT__MULTIPLIER2, null, msgs);
      if (newMultiplier2 != null)
        msgs = ((InternalEObject)newMultiplier2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ArithmeticPackage.MULTIPLICATION_STATEMENT__MULTIPLIER2, null, msgs);
      msgs = basicSetMultiplier2(newMultiplier2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArithmeticPackage.MULTIPLICATION_STATEMENT__MULTIPLIER2, newMultiplier2, newMultiplier2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ArithmeticPackage.MULTIPLICATION_STATEMENT__MULTIPLIER1:
        return basicSetMultiplier1(null, msgs);
      case ArithmeticPackage.MULTIPLICATION_STATEMENT__MULTIPLIER2:
        return basicSetMultiplier2(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ArithmeticPackage.MULTIPLICATION_STATEMENT__MULTIPLIER1:
        return getMultiplier1();
      case ArithmeticPackage.MULTIPLICATION_STATEMENT__MULTIPLIER2:
        return getMultiplier2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ArithmeticPackage.MULTIPLICATION_STATEMENT__MULTIPLIER1:
        setMultiplier1((Expression)newValue);
        return;
      case ArithmeticPackage.MULTIPLICATION_STATEMENT__MULTIPLIER2:
        setMultiplier2((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ArithmeticPackage.MULTIPLICATION_STATEMENT__MULTIPLIER1:
        setMultiplier1((Expression)null);
        return;
      case ArithmeticPackage.MULTIPLICATION_STATEMENT__MULTIPLIER2:
        setMultiplier2((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ArithmeticPackage.MULTIPLICATION_STATEMENT__MULTIPLIER1:
        return multiplier1 != null;
      case ArithmeticPackage.MULTIPLICATION_STATEMENT__MULTIPLIER2:
        return multiplier2 != null;
    }
    return super.eIsSet(featureID);
  }

} //MultiplicationStatementImpl
