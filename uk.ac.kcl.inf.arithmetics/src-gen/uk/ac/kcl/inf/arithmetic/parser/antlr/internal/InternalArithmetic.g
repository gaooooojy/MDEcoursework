/*
 * generated by Xtext 2.24.0
 */
grammar InternalArithmetic;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.arithmetic.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.arithmetic.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.arithmetic.services.ArithmeticGrammarAccess;

}

@parser::members {

 	private ArithmeticGrammarAccess grammarAccess;

    public InternalArithmeticParser(TokenStream input, ArithmeticGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ArithmeticsProgram";
   	}

   	@Override
   	protected ArithmeticGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleArithmeticsProgram
entryRuleArithmeticsProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticsProgramRule()); }
	iv_ruleArithmeticsProgram=ruleArithmeticsProgram
	{ $current=$iv_ruleArithmeticsProgram.current; }
	EOF;

// Rule ArithmeticsProgram
ruleArithmeticsProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getArithmeticsProgramAccess().getStatesStatementParserRuleCall_0());
			}
			lv_states_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getArithmeticsProgramRule());
				}
				add(
					$current,
					"states",
					lv_states_0_0,
					"uk.ac.kcl.inf.arithmetic.Arithmetic.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getAdditionStatementParserRuleCall_0());
		}
		this_AdditionStatement_0=ruleAdditionStatement
		{
			$current = $this_AdditionStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSubtractionStatementParserRuleCall_1());
		}
		this_SubtractionStatement_1=ruleSubtractionStatement
		{
			$current = $this_SubtractionStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getMultiplicationStatementParserRuleCall_2());
		}
		this_MultiplicationStatement_2=ruleMultiplicationStatement
		{
			$current = $this_MultiplicationStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDivisionStatementParserRuleCall_3());
		}
		this_DivisionStatement_3=ruleDivisionStatement
		{
			$current = $this_DivisionStatement_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getPowerStatementParserRuleCall_4());
		}
		this_PowerStatement_4=rulePowerStatement
		{
			$current = $this_PowerStatement_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getAdditionStatementParserRuleCall_0());
		}
		this_AdditionStatement_0=ruleAdditionStatement
		{
			$current = $this_AdditionStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getSubtractionStatementParserRuleCall_1());
		}
		this_SubtractionStatement_1=ruleSubtractionStatement
		{
			$current = $this_SubtractionStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getMultiplicationStatementParserRuleCall_2());
		}
		this_MultiplicationStatement_2=ruleMultiplicationStatement
		{
			$current = $this_MultiplicationStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getDivisionStatementParserRuleCall_3());
		}
		this_DivisionStatement_3=ruleDivisionStatement
		{
			$current = $this_DivisionStatement_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getPowerStatementParserRuleCall_4());
		}
		this_PowerStatement_4=rulePowerStatement
		{
			$current = $this_PowerStatement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getNumberExpressionParserRuleCall_5());
		}
		this_NumberExpression_5=ruleNumberExpression
		{
			$current = $this_NumberExpression_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAdditionStatement
entryRuleAdditionStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionStatementRule()); }
	iv_ruleAdditionStatement=ruleAdditionStatement
	{ $current=$iv_ruleAdditionStatement.current; }
	EOF;

// Rule AdditionStatement
ruleAdditionStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='add'
		{
			newLeafNode(otherlv_0, grammarAccess.getAdditionStatementAccess().getAddKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getAdditionStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditionStatementAccess().getAddend1ExpressionParserRuleCall_2_0());
				}
				lv_addend1_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditionStatementRule());
					}
					set(
						$current,
						"addend1",
						lv_addend1_2_0,
						"uk.ac.kcl.inf.arithmetic.Arithmetic.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getAdditionStatementAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAdditionStatementAccess().getAddend2ExpressionParserRuleCall_4_0());
				}
				lv_addend2_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdditionStatementRule());
					}
					set(
						$current,
						"addend2",
						lv_addend2_4_0,
						"uk.ac.kcl.inf.arithmetic.Arithmetic.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getAdditionStatementAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleSubtractionStatement
entryRuleSubtractionStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubtractionStatementRule()); }
	iv_ruleSubtractionStatement=ruleSubtractionStatement
	{ $current=$iv_ruleSubtractionStatement.current; }
	EOF;

// Rule SubtractionStatement
ruleSubtractionStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='subtract'
		{
			newLeafNode(otherlv_0, grammarAccess.getSubtractionStatementAccess().getSubtractKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSubtractionStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubtractionStatementAccess().getMinuendExpressionParserRuleCall_2_0());
				}
				lv_minuend_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubtractionStatementRule());
					}
					set(
						$current,
						"minuend",
						lv_minuend_2_0,
						"uk.ac.kcl.inf.arithmetic.Arithmetic.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getSubtractionStatementAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubtractionStatementAccess().getSubtrahendExpressionParserRuleCall_4_0());
				}
				lv_subtrahend_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubtractionStatementRule());
					}
					set(
						$current,
						"subtrahend",
						lv_subtrahend_4_0,
						"uk.ac.kcl.inf.arithmetic.Arithmetic.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getSubtractionStatementAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleMultiplicationStatement
entryRuleMultiplicationStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationStatementRule()); }
	iv_ruleMultiplicationStatement=ruleMultiplicationStatement
	{ $current=$iv_ruleMultiplicationStatement.current; }
	EOF;

// Rule MultiplicationStatement
ruleMultiplicationStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='multiply'
		{
			newLeafNode(otherlv_0, grammarAccess.getMultiplicationStatementAccess().getMultiplyKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMultiplicationStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicationStatementAccess().getMultiplier1ExpressionParserRuleCall_2_0());
				}
				lv_multiplier1_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicationStatementRule());
					}
					set(
						$current,
						"multiplier1",
						lv_multiplier1_2_0,
						"uk.ac.kcl.inf.arithmetic.Arithmetic.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getMultiplicationStatementAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMultiplicationStatementAccess().getMultiplier2ExpressionParserRuleCall_4_0());
				}
				lv_multiplier2_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultiplicationStatementRule());
					}
					set(
						$current,
						"multiplier2",
						lv_multiplier2_4_0,
						"uk.ac.kcl.inf.arithmetic.Arithmetic.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getMultiplicationStatementAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleDivisionStatement
entryRuleDivisionStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDivisionStatementRule()); }
	iv_ruleDivisionStatement=ruleDivisionStatement
	{ $current=$iv_ruleDivisionStatement.current; }
	EOF;

// Rule DivisionStatement
ruleDivisionStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='divide'
		{
			newLeafNode(otherlv_0, grammarAccess.getDivisionStatementAccess().getDivideKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getDivisionStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDivisionStatementAccess().getDividendExpressionParserRuleCall_2_0());
				}
				lv_dividend_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDivisionStatementRule());
					}
					set(
						$current,
						"dividend",
						lv_dividend_2_0,
						"uk.ac.kcl.inf.arithmetic.Arithmetic.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getDivisionStatementAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDivisionStatementAccess().getDivisorExpressionParserRuleCall_4_0());
				}
				lv_divisor_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDivisionStatementRule());
					}
					set(
						$current,
						"divisor",
						lv_divisor_4_0,
						"uk.ac.kcl.inf.arithmetic.Arithmetic.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getDivisionStatementAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRulePowerStatement
entryRulePowerStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPowerStatementRule()); }
	iv_rulePowerStatement=rulePowerStatement
	{ $current=$iv_rulePowerStatement.current; }
	EOF;

// Rule PowerStatement
rulePowerStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='power'
		{
			newLeafNode(otherlv_0, grammarAccess.getPowerStatementAccess().getPowerKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPowerStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPowerStatementAccess().getBasenumberNumberExpressionParserRuleCall_2_0());
				}
				lv_basenumber_2_0=ruleNumberExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPowerStatementRule());
					}
					set(
						$current,
						"basenumber",
						lv_basenumber_2_0,
						"uk.ac.kcl.inf.arithmetic.Arithmetic.NumberExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getPowerStatementAccess().getCommaKeyword_3());
		}
		(
			(
				lv_times_4_0=RULE_INT
				{
					newLeafNode(lv_times_4_0, grammarAccess.getPowerStatementAccess().getTimesINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPowerStatementRule());
					}
					setWithLastConsumed(
						$current,
						"times",
						lv_times_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getPowerStatementAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleNumberExpression
entryRuleNumberExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberExpressionRule()); }
	iv_ruleNumberExpression=ruleNumberExpression
	{ $current=$iv_ruleNumberExpression.current; }
	EOF;

// Rule NumberExpression
ruleNumberExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumberExpressionAccess().getIntLiteralParserRuleCall_0());
		}
		this_IntLiteral_0=ruleIntLiteral
		{
			$current = $this_IntLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumberExpressionAccess().getRealLiteralParserRuleCall_1());
		}
		this_RealLiteral_1=ruleRealLiteral
		{
			$current = $this_RealLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntLiteralRule()); }
	iv_ruleIntLiteral=ruleIntLiteral
	{ $current=$iv_ruleIntLiteral.current; }
	EOF;

// Rule IntLiteral
ruleIntLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_num_0_0=RULE_INT
			{
				newLeafNode(lv_num_0_0, grammarAccess.getIntLiteralAccess().getNumINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"num",
					lv_num_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRealLiteralRule()); }
	iv_ruleRealLiteral=ruleRealLiteral
	{ $current=$iv_ruleRealLiteral.current; }
	EOF;

// Rule RealLiteral
ruleRealLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getRealLiteralAccess().getNumREALParserRuleCall_0());
			}
			lv_num_0_0=ruleREAL
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getRealLiteralRule());
				}
				set(
					$current,
					"num",
					lv_num_0_0,
					"uk.ac.kcl.inf.arithmetic.Arithmetic.REAL");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleREAL
entryRuleREAL returns [String current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getREALRule()); }
	iv_ruleREAL=ruleREAL
	{ $current=$iv_ruleREAL.current.getText(); }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule REAL
ruleREAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		(
			this_INT_0=RULE_INT
			{
				$current.merge(this_INT_0);
			}
			{
				newLeafNode(this_INT_0, grammarAccess.getREALAccess().getINTTerminalRuleCall_0());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getREALAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getREALAccess().getINTTerminalRuleCall_2());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
