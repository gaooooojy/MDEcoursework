/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.chessgame.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.inf.chessgame.ide.contentassist.antlr.internal.InternalChessGameParser;
import uk.ac.kcl.inf.chessgame.services.ChessGameGrammarAccess;

public class ChessGameParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ChessGameGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ChessGameGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getFieldSpecificationAccess().getNameAlternatives_10_0(), "rule__FieldSpecification__NameAlternatives_10_0");
			builder.put(grammarAccess.getCellDisplaySpecAccess().getAlternatives_2(), "rule__CellDisplaySpec__Alternatives_2");
			builder.put(grammarAccess.getCellDisplaySpecAccess().getColorAlternatives_2_1_2_0(), "rule__CellDisplaySpec__ColorAlternatives_2_1_2_0");
			builder.put(grammarAccess.getMouseTriggerAccess().getAlternatives(), "rule__MouseTrigger__Alternatives");
			builder.put(grammarAccess.getChessProgramAccess().getGroup(), "rule__ChessProgram__Group__0");
			builder.put(grammarAccess.getFieldSpecificationAccess().getGroup(), "rule__FieldSpecification__Group__0");
			builder.put(grammarAccess.getCellStateAccess().getGroup(), "rule__CellState__Group__0");
			builder.put(grammarAccess.getCellStateAccess().getGroup_3(), "rule__CellState__Group_3__0");
			builder.put(grammarAccess.getCellDisplaySpecAccess().getGroup(), "rule__CellDisplaySpec__Group__0");
			builder.put(grammarAccess.getCellDisplaySpecAccess().getGroup_2_0(), "rule__CellDisplaySpec__Group_2_0__0");
			builder.put(grammarAccess.getCellDisplaySpecAccess().getGroup_2_1(), "rule__CellDisplaySpec__Group_2_1__0");
			builder.put(grammarAccess.getTransitionSpecAccess().getGroup(), "rule__TransitionSpec__Group__0");
			builder.put(grammarAccess.getMouseTriggerAccess().getGroup_1(), "rule__MouseTrigger__Group_1__0");
			builder.put(grammarAccess.getGameEndAccess().getGroup(), "rule__GameEnd__Group__0");
			builder.put(grammarAccess.getContextExpressionAccess().getGroup(), "rule__ContextExpression__Group__0");
			builder.put(grammarAccess.getStateFilterExpressionAccess().getGroup(), "rule__StateFilterExpression__Group__0");
			builder.put(grammarAccess.getEmptyExpressionAccess().getGroup(), "rule__EmptyExpression__Group__0");
			builder.put(grammarAccess.getEndBehaviourAccess().getGroup(), "rule__EndBehaviour__Group__0");
			builder.put(grammarAccess.getChessProgramAccess().getSizeAssignment_0(), "rule__ChessProgram__SizeAssignment_0");
			builder.put(grammarAccess.getChessProgramAccess().getOptionsAssignment_1(), "rule__ChessProgram__OptionsAssignment_1");
			builder.put(grammarAccess.getChessProgramAccess().getEndGameAssignment_2(), "rule__ChessProgram__EndGameAssignment_2");
			builder.put(grammarAccess.getFieldSpecificationAccess().getWidthAssignment_4(), "rule__FieldSpecification__WidthAssignment_4");
			builder.put(grammarAccess.getFieldSpecificationAccess().getHeightAssignment_7(), "rule__FieldSpecification__HeightAssignment_7");
			builder.put(grammarAccess.getFieldSpecificationAccess().getNameAssignment_10(), "rule__FieldSpecification__NameAssignment_10");
			builder.put(grammarAccess.getOptionSpecificationAccess().getStatesAssignment(), "rule__OptionSpecification__StatesAssignment");
			builder.put(grammarAccess.getCellStateAccess().getNameAssignment_0(), "rule__CellState__NameAssignment_0");
			builder.put(grammarAccess.getCellStateAccess().getDisplayAssignment_2(), "rule__CellState__DisplayAssignment_2");
			builder.put(grammarAccess.getCellStateAccess().getTransitionsAssignment_3_2(), "rule__CellState__TransitionsAssignment_3_2");
			builder.put(grammarAccess.getCellDisplaySpecAccess().getTextAssignment_2_0_2(), "rule__CellDisplaySpec__TextAssignment_2_0_2");
			builder.put(grammarAccess.getCellDisplaySpecAccess().getColorAssignment_2_1_2(), "rule__CellDisplaySpec__ColorAssignment_2_1_2");
			builder.put(grammarAccess.getTransitionSpecAccess().getTriggerAssignment_1(), "rule__TransitionSpec__TriggerAssignment_1");
			builder.put(grammarAccess.getTransitionSpecAccess().getTargetAssignment_4(), "rule__TransitionSpec__TargetAssignment_4");
			builder.put(grammarAccess.getMouseTriggerAccess().getMouseAssignment_0(), "rule__MouseTrigger__MouseAssignment_0");
			builder.put(grammarAccess.getGameEndAccess().getNameAssignment_1(), "rule__GameEnd__NameAssignment_1");
			builder.put(grammarAccess.getGameEndAccess().getActionAssignment_4(), "rule__GameEnd__ActionAssignment_4");
			builder.put(grammarAccess.getGameEndAccess().getBehaviourAssignment_6(), "rule__GameEnd__BehaviourAssignment_6");
			builder.put(grammarAccess.getContextExpressionAccess().getSub_expAssignment_0(), "rule__ContextExpression__Sub_expAssignment_0");
			builder.put(grammarAccess.getContextExpressionAccess().getCellStateAssignment_2(), "rule__ContextExpression__CellStateAssignment_2");
			builder.put(grammarAccess.getStateFilterExpressionAccess().getCell_stateAssignment_2(), "rule__StateFilterExpression__Cell_stateAssignment_2");
			builder.put(grammarAccess.getEndBehaviourAccess().getMessageAssignment_2(), "rule__EndBehaviour__MessageAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ChessGameGrammarAccess grammarAccess;

	@Override
	protected InternalChessGameParser createParser() {
		InternalChessGameParser result = new InternalChessGameParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ChessGameGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ChessGameGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
