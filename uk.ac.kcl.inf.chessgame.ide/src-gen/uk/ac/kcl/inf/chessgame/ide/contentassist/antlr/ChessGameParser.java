/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.chessgame.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.inf.chessgame.ide.contentassist.antlr.internal.InternalChessGameParser;
import uk.ac.kcl.inf.chessgame.services.ChessGameGrammarAccess;

public class ChessGameParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ChessGameGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ChessGameGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementsAccess().getAlternatives(), "rule__Statements__Alternatives");
			builder.put(grammarAccess.getWidthAccess().getGroup(), "rule__Width__Group__0");
			builder.put(grammarAccess.getHeightAccess().getGroup(), "rule__Height__Group__0");
			builder.put(grammarAccess.getChessProgramAccess().getStatementsAssignment(), "rule__ChessProgram__StatementsAssignment");
			builder.put(grammarAccess.getWidthAccess().getWIDTHAssignment_2(), "rule__Width__WIDTHAssignment_2");
			builder.put(grammarAccess.getHeightAccess().getHEIGHTAssignment_2(), "rule__Height__HEIGHTAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ChessGameGrammarAccess grammarAccess;

	@Override
	protected InternalChessGameParser createParser() {
		InternalChessGameParser result = new InternalChessGameParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ChessGameGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ChessGameGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
