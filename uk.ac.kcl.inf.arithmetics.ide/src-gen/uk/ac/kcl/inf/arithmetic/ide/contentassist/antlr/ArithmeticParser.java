/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.arithmetic.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.inf.arithmetic.ide.contentassist.antlr.internal.InternalArithmeticParser;
import uk.ac.kcl.inf.arithmetic.services.ArithmeticGrammarAccess;

public class ArithmeticParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ArithmeticGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ArithmeticGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
			builder.put(grammarAccess.getNumberExpressionAccess().getAlternatives(), "rule__NumberExpression__Alternatives");
			builder.put(grammarAccess.getAdditionStatementAccess().getGroup(), "rule__AdditionStatement__Group__0");
			builder.put(grammarAccess.getSubtractionStatementAccess().getGroup(), "rule__SubtractionStatement__Group__0");
			builder.put(grammarAccess.getMultiplicationStatementAccess().getGroup(), "rule__MultiplicationStatement__Group__0");
			builder.put(grammarAccess.getDivisionStatementAccess().getGroup(), "rule__DivisionStatement__Group__0");
			builder.put(grammarAccess.getPowerStatementAccess().getGroup(), "rule__PowerStatement__Group__0");
			builder.put(grammarAccess.getREALAccess().getGroup(), "rule__REAL__Group__0");
			builder.put(grammarAccess.getArithmeticsProgramAccess().getStatesAssignment(), "rule__ArithmeticsProgram__StatesAssignment");
			builder.put(grammarAccess.getAdditionStatementAccess().getAddend1Assignment_2(), "rule__AdditionStatement__Addend1Assignment_2");
			builder.put(grammarAccess.getAdditionStatementAccess().getAddend2Assignment_4(), "rule__AdditionStatement__Addend2Assignment_4");
			builder.put(grammarAccess.getSubtractionStatementAccess().getMinuendAssignment_2(), "rule__SubtractionStatement__MinuendAssignment_2");
			builder.put(grammarAccess.getSubtractionStatementAccess().getSubtrahendAssignment_4(), "rule__SubtractionStatement__SubtrahendAssignment_4");
			builder.put(grammarAccess.getMultiplicationStatementAccess().getMultiplier1Assignment_2(), "rule__MultiplicationStatement__Multiplier1Assignment_2");
			builder.put(grammarAccess.getMultiplicationStatementAccess().getMultiplier2Assignment_4(), "rule__MultiplicationStatement__Multiplier2Assignment_4");
			builder.put(grammarAccess.getDivisionStatementAccess().getDividendAssignment_2(), "rule__DivisionStatement__DividendAssignment_2");
			builder.put(grammarAccess.getDivisionStatementAccess().getDivisorAssignment_4(), "rule__DivisionStatement__DivisorAssignment_4");
			builder.put(grammarAccess.getPowerStatementAccess().getBasenumberAssignment_2(), "rule__PowerStatement__BasenumberAssignment_2");
			builder.put(grammarAccess.getPowerStatementAccess().getTimesAssignment_4(), "rule__PowerStatement__TimesAssignment_4");
			builder.put(grammarAccess.getIntLiteralAccess().getNumAssignment(), "rule__IntLiteral__NumAssignment");
			builder.put(grammarAccess.getRealLiteralAccess().getNumAssignment(), "rule__RealLiteral__NumAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ArithmeticGrammarAccess grammarAccess;

	@Override
	protected InternalArithmeticParser createParser() {
		InternalArithmeticParser result = new InternalArithmeticParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ArithmeticGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ArithmeticGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
