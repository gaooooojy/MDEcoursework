/*
 * generated by Xtext 2.24.0
 */
grammar InternalArithmetic;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.ac.kcl.inf.arithmetic.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.arithmetic.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.ac.kcl.inf.arithmetic.services.ArithmeticGrammarAccess;

}
@parser::members {
	private ArithmeticGrammarAccess grammarAccess;

	public void setGrammarAccess(ArithmeticGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleArithmeticsProgram
entryRuleArithmeticsProgram
:
{ before(grammarAccess.getArithmeticsProgramRule()); }
	 ruleArithmeticsProgram
{ after(grammarAccess.getArithmeticsProgramRule()); } 
	 EOF 
;

// Rule ArithmeticsProgram
ruleArithmeticsProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticsProgramAccess().getStatesAssignment()); }
		(rule__ArithmeticsProgram__StatesAssignment)*
		{ after(grammarAccess.getArithmeticsProgramAccess().getStatesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdditionStatement
entryRuleAdditionStatement
:
{ before(grammarAccess.getAdditionStatementRule()); }
	 ruleAdditionStatement
{ after(grammarAccess.getAdditionStatementRule()); } 
	 EOF 
;

// Rule AdditionStatement
ruleAdditionStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionStatementAccess().getGroup()); }
		(rule__AdditionStatement__Group__0)
		{ after(grammarAccess.getAdditionStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubtractionStatement
entryRuleSubtractionStatement
:
{ before(grammarAccess.getSubtractionStatementRule()); }
	 ruleSubtractionStatement
{ after(grammarAccess.getSubtractionStatementRule()); } 
	 EOF 
;

// Rule SubtractionStatement
ruleSubtractionStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubtractionStatementAccess().getGroup()); }
		(rule__SubtractionStatement__Group__0)
		{ after(grammarAccess.getSubtractionStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicationStatement
entryRuleMultiplicationStatement
:
{ before(grammarAccess.getMultiplicationStatementRule()); }
	 ruleMultiplicationStatement
{ after(grammarAccess.getMultiplicationStatementRule()); } 
	 EOF 
;

// Rule MultiplicationStatement
ruleMultiplicationStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationStatementAccess().getGroup()); }
		(rule__MultiplicationStatement__Group__0)
		{ after(grammarAccess.getMultiplicationStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDivisionStatement
entryRuleDivisionStatement
:
{ before(grammarAccess.getDivisionStatementRule()); }
	 ruleDivisionStatement
{ after(grammarAccess.getDivisionStatementRule()); } 
	 EOF 
;

// Rule DivisionStatement
ruleDivisionStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDivisionStatementAccess().getGroup()); }
		(rule__DivisionStatement__Group__0)
		{ after(grammarAccess.getDivisionStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePowerStatement
entryRulePowerStatement
:
{ before(grammarAccess.getPowerStatementRule()); }
	 rulePowerStatement
{ after(grammarAccess.getPowerStatementRule()); } 
	 EOF 
;

// Rule PowerStatement
rulePowerStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPowerStatementAccess().getGroup()); }
		(rule__PowerStatement__Group__0)
		{ after(grammarAccess.getPowerStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberExpression
entryRuleNumberExpression
:
{ before(grammarAccess.getNumberExpressionRule()); }
	 ruleNumberExpression
{ after(grammarAccess.getNumberExpressionRule()); } 
	 EOF 
;

// Rule NumberExpression
ruleNumberExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberExpressionAccess().getAlternatives()); }
		(rule__NumberExpression__Alternatives)
		{ after(grammarAccess.getNumberExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntLiteralAccess().getNumAssignment()); }
		(rule__IntLiteral__NumAssignment)
		{ after(grammarAccess.getIntLiteralAccess().getNumAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRealLiteral
entryRuleRealLiteral
:
{ before(grammarAccess.getRealLiteralRule()); }
	 ruleRealLiteral
{ after(grammarAccess.getRealLiteralRule()); } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRealLiteralAccess().getNumAssignment()); }
		(rule__RealLiteral__NumAssignment)
		{ after(grammarAccess.getRealLiteralAccess().getNumAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleREAL
entryRuleREAL
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getREALRule()); }
	 ruleREAL
{ after(grammarAccess.getREALRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule REAL
ruleREAL 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getREALAccess().getGroup()); }
		(rule__REAL__Group__0)
		{ after(grammarAccess.getREALAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getAdditionStatementParserRuleCall_0()); }
		ruleAdditionStatement
		{ after(grammarAccess.getStatementAccess().getAdditionStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getSubtractionStatementParserRuleCall_1()); }
		ruleSubtractionStatement
		{ after(grammarAccess.getStatementAccess().getSubtractionStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getMultiplicationStatementParserRuleCall_2()); }
		ruleMultiplicationStatement
		{ after(grammarAccess.getStatementAccess().getMultiplicationStatementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getDivisionStatementParserRuleCall_3()); }
		ruleDivisionStatement
		{ after(grammarAccess.getStatementAccess().getDivisionStatementParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getPowerStatementParserRuleCall_4()); }
		rulePowerStatement
		{ after(grammarAccess.getStatementAccess().getPowerStatementParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getAdditionStatementParserRuleCall_0()); }
		ruleAdditionStatement
		{ after(grammarAccess.getExpressionAccess().getAdditionStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getSubtractionStatementParserRuleCall_1()); }
		ruleSubtractionStatement
		{ after(grammarAccess.getExpressionAccess().getSubtractionStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getMultiplicationStatementParserRuleCall_2()); }
		ruleMultiplicationStatement
		{ after(grammarAccess.getExpressionAccess().getMultiplicationStatementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getDivisionStatementParserRuleCall_3()); }
		ruleDivisionStatement
		{ after(grammarAccess.getExpressionAccess().getDivisionStatementParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getPowerStatementParserRuleCall_4()); }
		rulePowerStatement
		{ after(grammarAccess.getExpressionAccess().getPowerStatementParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getNumberExpressionParserRuleCall_5()); }
		ruleNumberExpression
		{ after(grammarAccess.getExpressionAccess().getNumberExpressionParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberExpressionAccess().getIntLiteralParserRuleCall_0()); }
		ruleIntLiteral
		{ after(grammarAccess.getNumberExpressionAccess().getIntLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberExpressionAccess().getRealLiteralParserRuleCall_1()); }
		ruleRealLiteral
		{ after(grammarAccess.getNumberExpressionAccess().getRealLiteralParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionStatement__Group__0__Impl
	rule__AdditionStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionStatementAccess().getAddKeyword_0()); }
	'add'
	{ after(grammarAccess.getAdditionStatementAccess().getAddKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionStatement__Group__1__Impl
	rule__AdditionStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionStatementAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getAdditionStatementAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionStatement__Group__2__Impl
	rule__AdditionStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionStatementAccess().getAddend1Assignment_2()); }
	(rule__AdditionStatement__Addend1Assignment_2)
	{ after(grammarAccess.getAdditionStatementAccess().getAddend1Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionStatement__Group__3__Impl
	rule__AdditionStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionStatementAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getAdditionStatementAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionStatement__Group__4__Impl
	rule__AdditionStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionStatementAccess().getAddend2Assignment_4()); }
	(rule__AdditionStatement__Addend2Assignment_4)
	{ after(grammarAccess.getAdditionStatementAccess().getAddend2Assignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionStatementAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getAdditionStatementAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubtractionStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubtractionStatement__Group__0__Impl
	rule__SubtractionStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubtractionStatementAccess().getSubtractKeyword_0()); }
	'subtract'
	{ after(grammarAccess.getSubtractionStatementAccess().getSubtractKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubtractionStatement__Group__1__Impl
	rule__SubtractionStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubtractionStatementAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getSubtractionStatementAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubtractionStatement__Group__2__Impl
	rule__SubtractionStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubtractionStatementAccess().getMinuendAssignment_2()); }
	(rule__SubtractionStatement__MinuendAssignment_2)
	{ after(grammarAccess.getSubtractionStatementAccess().getMinuendAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubtractionStatement__Group__3__Impl
	rule__SubtractionStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubtractionStatementAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getSubtractionStatementAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubtractionStatement__Group__4__Impl
	rule__SubtractionStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubtractionStatementAccess().getSubtrahendAssignment_4()); }
	(rule__SubtractionStatement__SubtrahendAssignment_4)
	{ after(grammarAccess.getSubtractionStatementAccess().getSubtrahendAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubtractionStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubtractionStatementAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getSubtractionStatementAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationStatement__Group__0__Impl
	rule__MultiplicationStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationStatementAccess().getMultiplyKeyword_0()); }
	'multiply'
	{ after(grammarAccess.getMultiplicationStatementAccess().getMultiplyKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationStatement__Group__1__Impl
	rule__MultiplicationStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationStatementAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getMultiplicationStatementAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationStatement__Group__2__Impl
	rule__MultiplicationStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationStatementAccess().getMultiplier1Assignment_2()); }
	(rule__MultiplicationStatement__Multiplier1Assignment_2)
	{ after(grammarAccess.getMultiplicationStatementAccess().getMultiplier1Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationStatement__Group__3__Impl
	rule__MultiplicationStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationStatementAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getMultiplicationStatementAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationStatement__Group__4__Impl
	rule__MultiplicationStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationStatementAccess().getMultiplier2Assignment_4()); }
	(rule__MultiplicationStatement__Multiplier2Assignment_4)
	{ after(grammarAccess.getMultiplicationStatementAccess().getMultiplier2Assignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationStatementAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getMultiplicationStatementAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DivisionStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DivisionStatement__Group__0__Impl
	rule__DivisionStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionStatementAccess().getDivideKeyword_0()); }
	'divide'
	{ after(grammarAccess.getDivisionStatementAccess().getDivideKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DivisionStatement__Group__1__Impl
	rule__DivisionStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionStatementAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getDivisionStatementAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DivisionStatement__Group__2__Impl
	rule__DivisionStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionStatementAccess().getDividendAssignment_2()); }
	(rule__DivisionStatement__DividendAssignment_2)
	{ after(grammarAccess.getDivisionStatementAccess().getDividendAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DivisionStatement__Group__3__Impl
	rule__DivisionStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionStatementAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getDivisionStatementAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DivisionStatement__Group__4__Impl
	rule__DivisionStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionStatementAccess().getDivisorAssignment_4()); }
	(rule__DivisionStatement__DivisorAssignment_4)
	{ after(grammarAccess.getDivisionStatementAccess().getDivisorAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DivisionStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDivisionStatementAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getDivisionStatementAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PowerStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerStatement__Group__0__Impl
	rule__PowerStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerStatementAccess().getPowerKeyword_0()); }
	'power'
	{ after(grammarAccess.getPowerStatementAccess().getPowerKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerStatement__Group__1__Impl
	rule__PowerStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerStatementAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getPowerStatementAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerStatement__Group__2__Impl
	rule__PowerStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerStatementAccess().getBasenumberAssignment_2()); }
	(rule__PowerStatement__BasenumberAssignment_2)
	{ after(grammarAccess.getPowerStatementAccess().getBasenumberAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerStatement__Group__3__Impl
	rule__PowerStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerStatementAccess().getCommaKeyword_3()); }
	','
	{ after(grammarAccess.getPowerStatementAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerStatement__Group__4__Impl
	rule__PowerStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerStatementAccess().getTimesAssignment_4()); }
	(rule__PowerStatement__TimesAssignment_4)
	{ after(grammarAccess.getPowerStatementAccess().getTimesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerStatementAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getPowerStatementAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__REAL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__0__Impl
	rule__REAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
	(RULE_INT)?
	{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__1__Impl
	rule__REAL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticsProgram__StatesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getArithmeticsProgramAccess().getStatesStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getArithmeticsProgramAccess().getStatesStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionStatement__Addend1Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionStatementAccess().getAddend1ExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getAdditionStatementAccess().getAddend1ExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionStatement__Addend2Assignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionStatementAccess().getAddend2ExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getAdditionStatementAccess().getAddend2ExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionStatement__MinuendAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubtractionStatementAccess().getMinuendExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getSubtractionStatementAccess().getMinuendExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubtractionStatement__SubtrahendAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubtractionStatementAccess().getSubtrahendExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getSubtractionStatementAccess().getSubtrahendExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationStatement__Multiplier1Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationStatementAccess().getMultiplier1ExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getMultiplicationStatementAccess().getMultiplier1ExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationStatement__Multiplier2Assignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationStatementAccess().getMultiplier2ExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getMultiplicationStatementAccess().getMultiplier2ExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionStatement__DividendAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDivisionStatementAccess().getDividendExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getDivisionStatementAccess().getDividendExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DivisionStatement__DivisorAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDivisionStatementAccess().getDivisorExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getDivisionStatementAccess().getDivisorExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerStatement__BasenumberAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPowerStatementAccess().getBasenumberExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getPowerStatementAccess().getBasenumberExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerStatement__TimesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPowerStatementAccess().getTimesINTTerminalRuleCall_4_0()); }
		RULE_INT
		{ after(grammarAccess.getPowerStatementAccess().getTimesINTTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__NumAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntLiteralAccess().getNumINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntLiteralAccess().getNumINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__NumAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRealLiteralAccess().getNumREALParserRuleCall_0()); }
		ruleREAL
		{ after(grammarAccess.getRealLiteralAccess().getNumREALParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
